<html> 
<head> 
<title>Mission 3</title>
</head>
<body style='overflow: hidden; margin: 0 0 0 0;'>
	<p id="message">Waiting for the first obstacle to pass.</p> <!-- This line will tell the total number of rings passed. -->
	
	<p id="score"><b>Your Score:</b> 0</p> <!-- This line will tell the total score of player -->
	<p id="life"><b>Your Life:</b> 4</p>
	

	<audio id="point" src="point.mp3" preload="auto"></audio> <!-- audio which refers to the points -->
	<audio id="jump" src="jump.wav" preload="auto"></audio>
	<audio id="broken" src="broken.mp3" preload="auto"></audio>
	<audio id="track" src="track1.mp3" preload="auto"></audio>
	
	
	<script src="RequestAnimationFrame.js"></script>
	<script src="Stats.js"></script>
	<script src="Three.js"></script>
	<script>
	var scene = new THREE.Scene();
	var obst = [];
	var temp = 0;
	var life = 4;
	var touch = false;
	var checklife;
	var count = 0; 
	var dec = 200;
	
	
	
	
	var score = 0; //Used to store the score of player.
	var factor = 1; //Decides the speed of camera and cube.
	var light;
	var test = 0; //used to check whether the ring has passed or not.
	var xSpeed = 0; //x co-ordinate of cube.
	var ySpeed = 0; //y co-ordinate of cube.
	var zSpeed = 200; //z co-ordinate of cube.
	var cameraZ = 400; //z co-ordinate of camera.
	var num = 0;
	var xObs = new Array(50);
	var zObs = new Array(50);
	zObs[0] = 100;
	

	var gravity = 20;
	var ground = true;
	var yPos = 0;
	var xPos = 0;
	
	var t = 0; //
	
	var camera; //used to create WebGL camera
	var renderer; //used to create WebGL renderer
	var geometry; //used to define object's geometry
	var material; //used to define object's material
	var Rmaterial; //used to define ring's material
	var cube; // stores the mesh(as of now the geometry is cube)
	var ring; // stores the ring's mesh
	initialiseScene(); //calling a function which initialises the scene
	animateScene(); //calling a function which will enables the animation





					function initialiseScene(){


						camera = new THREE.PerspectiveCamera(10, window.innerWidth/window.innerHeight, 1, 10000); 
						renderer = new THREE.WebGLRenderer(); 
						renderer.setSize(window.innerWidth, window.innerHeight); 
						document.body.appendChild(renderer.domElement); 
						geometry = new THREE.CubeGeometry(1,1,1);
						sun = new THREE.DirectionalLight( 0xffffff );
						sun.position.set( 10, 10, 10 );
						scene.add( sun );
						document.getElementById('track').play();
						

						 
						material = new THREE.MeshPhongMaterial({ color: 0x00ff00 });
					                 
						cube = new THREE.Mesh(geometry, material);
                                                cube.castShadow = true;
						cube.overdraw = true;
						var room = new THREE.CubeGeometry(100,0.5,15000);
						var floorMat = new THREE.MeshPhongMaterial({map: THREE.ImageUtils.loadTexture('floor3.jpg')});
						var floor = new THREE.Mesh(room,floorMat);
                                                floor.position.set(0,-3,0);
                                                
                        var wall = new THREE.CubeGeometry(0.5,500,15000);
                        var wall_left_image = new THREE.MeshPhongMaterial({map: THREE.ImageUtils.loadTexture('wall.jpg')});
                        var wall_right_image = new THREE.MeshPhongMaterial({map: THREE.ImageUtils.loadTexture('wall.jpg')});
                        var wall_left = new THREE.Mesh(wall,wall_left_image);
                                                wall_left.position.set(-100,0,0);
                        var wall_right = new THREE.Mesh(wall,wall_right_image);
                                                wall_right.position.set(100,0,0);
                        
                        var sky = new THREE.CubeGeometry(500, 0, 15000);
                        var horizon = new THREE.CubeGeometry(1000, 1000, 0.5);
                        var sky_mat = new THREE.MeshPhongMaterial({map: THREE.ImageUtils.loadTexture('wall.jpg')});
                        var horizon_mat = new THREE.MeshPhongMaterial({map: THREE.ImageUtils.loadTexture('horizon.jpg')});
                        var sky_add = new THREE.Mesh(sky,sky_mat);
                        var horizon_add = new THREE.Mesh(horizon,horizon_mat);
                        sky_add.position.set(0,100,0); 
                        horizon_add.position.set(0,0,-10000);
                        

						
						scene.add(camera);
						scene.add(floor);
						scene.add(wall_left);
						scene.add(wall_right);
						scene.add(sky_add);
                                                scene.add(horizon_add);
						
						light = new THREE.SpotLight(0x00ff00);
						light.castShadow = true;
						scene.add(light);
                                                light.position.set(0,0,0);
						renderer.shadowMapEnabled = true;
						cube.castShadow = true;

					  
						var directionalLight = new THREE.DirectionalLight(0xFFAA88, 1.0);
						directionalLight.position.set(1,-1,1);
                                                directionalLight.castShadow = true;
						scene.add(directionalLight); //adding directional light to the scene.
					var directionalLight2 = new THREE.DirectionalLight(0xFFAA88, 1.0);
						directionalLight2.position.set(-1,1,0);
						scene.add(directionalLight2);
					


						for( num = 1; num<=45 ; num++){
							zObs[num] = zObs[num-1] - dec;
							xObs[num-1] = (Math.random()*30 - 10);
							if(num == 10){
								dec = 150;
							}
			
							var mat = new THREE.MeshLambertMaterial( {map: THREE.ImageUtils.loadTexture('obstacle.jpg')} );
							obstacle = new THREE.Mesh( new THREE.CylinderGeometry( 3, 5, 5, 8, 0 ), mat );
							obstacle.position.set(xObs[num-1],0,zObs[num-1]);
							THREE.Collisions.colliders.push(
  							THREE.CollisionUtils.MeshOBB( obstacle ) );
  							obst.push(obstacle);
							scene.add(obstacle);
							scene.add(cube);  //adding the geometry to the scene.
						}


					    //Adding a listener for 'keydown' events. By this listener, all key events will be
					    //passed to the function 'onDocumentKeyDown'. There's another event type 'keypress'.
					    //It will report only the visible characters like 'a', but not the function keys
					    //like 'cursor up'.

				    	document.addEventListener("keydown", onDocumentKeyDown, false);


					}

 
	


					function onDocumentKeyDown(event){
						var keycode = event.which;
						//cursor left
						if(keycode == 37){
							xPos -= 0.5;
							
						}
						//cursor right
						else if(keycode == 39){

							xPos += 0.5;
							
						}
						//space bar
						else if(keycode == 32){
							if (ground) {
							ySpeed = 120;
							ground = false;
							document.getElementById('jump').play();
						}
							
						}
						//up arrow
						//else if(keycode == 38){
						//	zSpeed -= 1;
						//}
						//down arrow
						//else if(keycode == 40){
						//	zSpeed += 1;
						//}
					}

	//animating scene 

					function animateScene(){
                                        if(count == 45){factor = 0; return;}
						cube.rotation.x  =  Date.now() * 0.001; 
							
							ySpeed = ySpeed - gravity*0.1;
							yPos = yPos + ySpeed*0.001 - gravity*0.01*0.01/2;
							

						var ray = new THREE.Ray( cube.position, new THREE.Vector3(0,0,-1) );

						var c = THREE.Collisions.rayCastNearest( ray );

						 	
							


						

						

						if(yPos <= 0){

							yPos = 0;
							ground = true;
						}
						
						
						cube.position.set(xPos, yPos, zSpeed);

					    cube.doubleSided = true;
					    if ( c && c.distance <= 0 ) {

							touch = true;
							c.mesh.material.color.setHex( 0xCC9933 );
							if (checklife == true) {
								life--;
								document.getElementById('life').innerHTML = "Your Life:</b> "+life ;
								checklife = false;
								document.getElementById('broken').play();
								if(life<=0){
									document.getElementById('life').innerHTML = "You are dead!";
									return;
								}
							}
							

						}else{

							touch = false;
							checklife = true;
						}
					    if(zObs[temp] == zSpeed){
					    	++count;
					    	document.getElementById('message').innerHTML = "Number of obstacles has passed = "+count;
					    	
					    	if(ground == false  && touch == false){
					    		
					    		if(Math.sqrt((xObs[temp]-xPos)*(xObs[temp]-xPos)-(zObs[temp]-zSpeed)*(zObs[temp]-zSpeed)) <= 3){
					    			score++;
					    			document.getElementById('score').innerHTML = "<b>Your Score:</b> "+score;
					    			document.getElementById('point').play();
					    		}
					    	}
					    	temp++;
					    }
					
					    
					   
					    
					    
					    cameraZ -= factor; 
					    zSpeed -= factor;

					    camera.position.set(0, 5,cameraZ);
					    camera.lookAt(new THREE.Vector3( 0, yPos, zSpeed ));
					   

					   
						requestAnimationFrame(animateScene);
						
						renderer.render(scene, camera); 


						

					} 



	</script> 

</body> 

</html>